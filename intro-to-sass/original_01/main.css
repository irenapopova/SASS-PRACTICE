/* If I want to reset all elements to have a certain behavior, like using box-sizing: border-box; then use the star, the universal selector because now this is not using inheritance.
this way I am targeting every element on its own ,
I want to target content, padding and border when setting width and height. */

* {
    box-sizing: border-box;
}

body {
    font-family: 'Montserrat', sans-serif;
    margin: 0;
}

#product-overview {
    background: #ff1b68;
    width: 100%;
    height: 528px;
    /* adding layer padding to my element */
    /*margin: */
    padding: 10px;
    border: 5px black solid;
    /* short way of adding the following 3:
        border-style: solid;
        border-color: black;
        border-width: 5px;
          */
    margin: 10px;
    /* adding a box-sizing property to the element where I want to change it, the default is content-box */
    box-sizing: border-box;

}

/* SELECTOR - h1 */
/* there are multiple rules affects the same element it is the 
cascading, cascading means that multiple styles/rules can be applied to the same element. These rules may lead to conflict.
 */

/*Solving a problem like this I use SPECIFICITY */
/* THERE ARE RULES in CSS that define how such conflict should be resolved and which type of selector has higher specificity*/
/* the tag selector and also pseudo elements selectors have the lowest priority, also the universal selector and the star */

/* a higher specificity is assigned to class and pseudo class selectors, they are on the same level */

/* a higher specificity is assigned to ID - selectors , so if an element has a tag, a class and an ID selector and they all set the color of the element , the ID selector would win , no matter where it is positioned in the css file. The highest priority is assigned to inline style. If I have them they will overwrite the other styles, they have highest specificity */

/* tag selectors have the lowest specificity and inline styles the highest. */

/* i HAVE TO BE AWARE OF HOW THEY OVERWRITE each other*/
.section-title {
    color: #2ddf5c;
    font-family: inherit;
}

/* I can add a combinator to the h1 selector to narrow down which tyle of h1 tags I want to select */
#product-overview h1 {
    color: white;
    font-family: 'Anton', sans-serif;
    /* sens-serif is a browser default font */
}

/* with padding the content of the element is considered plus any margin,  */

/* padding and margin should not overlap hence the padding is added after the margin of child elements */
h1 {
    font-family: sans-serif;
}


/* the problem with the start selector is that it is very inefficient the way CSS has to parse all other elements, therefore I will use it but not for a global font family, I will use the body to wrap the whole content*/
/* 
* {
    font-family: sens-serif;
}  */

/* every element has a layer - margin, border, padding, */

/* the class should be descriptive*/
.main-header {
    width: 100%;
    background: #2ddf5c;
    /*i use padding value shorthand ,padding top and bottom is set to 8 px, and to left and right 16px*/
    padding: 8px 16px;

}

/* the display property alowes to change the behavior of an element from block to inline or even to inline-block which is a mixture or to none to remove it from the DOM even */

/* bellow i am setting the class which I assign to a list item, to mix the behavior of the elements */
/* these elements can go next to each other now but they still behave like block level elements when it comes to setting top and bottom margins, setting paddings, things that are not possible on inline elements.   */
.main-nav__items {
    display: inline-block;
    /*this mixes the behavior of both inline and block elements to set them in one line */
}