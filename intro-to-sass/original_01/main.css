/* If I want to reset all elements to have a certain behavior, like using box-sizing: border-box; then use the star, the universal selector because now this is not using inheritance.
this way I am targeting every element on its own ,
I want to target content, padding and border when setting width and height. */

* {
    box-sizing: border-box;
}

body {
    font-family: 'Montserrat', sans-serif;
    margin: 0;
}

#product-overview {

    background-image: url("images/tower-bridge.jpg") left 10% bottom 20%/cover no-repeat border-box;
    /* background-size: cover; */
    /*background-position: left 10% bottom 66%; */
    /*the default value is 50%*/
    /*positioning the image */
    /*with the percentage value I can define how much of the axes space */
    /* background-repeat: no-repeat; */
    /* background-origin: border-box; */
    /* background-clip: border-box; */
    /*background-clip: padding-box; */
    /*the border  around the image is empty in this case*/
    /*with background-clip , define where the image should be clipped if necessary , if I set to background-clip: content-box; it will clip the image before the padding*/
    /*background-clip overwrites background-origin, and it is important for defining how it should be not just positioned and sized but also how it should be clipped*/

    width: 100%;
    height: 528px;
    /* adding layer padding to my element */
    /*margin: */
    padding: 10px;
    /*border: 5px black solid; */
    /* short way of adding the following 3:
        border-style: solid;
        border-color: black;
        border-width: 5px;
          */
    margin-top: 43px;
    /* adding a box-sizing property to the element where I want to change it, the default is content-box */
    /* box-sizing: border-box; */
    /* border: 5px dashed red; */
    position: relative;

}

/*box-sizing  means the content without border and padding*/

/* SELECTOR - h1 */
/* there are multiple rules affects the same element it is the 
cascading, cascading means that multiple styles/rules can be applied to the same element. These rules may lead to conflict.
 */

/*Solving a problem like this I use SPECIFICITY */
/* THERE ARE RULES in CSS that define how such conflict should be resolved and which type of selector has higher specificity*/
/* the tag selector and also pseudo elements selectors have the lowest priority, also the universal selector and the star */

/* a higher specificity is assigned to class and pseudo class selectors, they are on the same level */

/* a higher specificity is assigned to ID - selectors , so if an element has a tag, a class and an ID selector and they all set the color of the element , the ID selector would win , no matter where it is positioned in the css file. The highest priority is assigned to inline style. If I have them they will overwrite the other styles, they have highest specificity */

/* tag selectors have the lowest specificity and inline styles the highest. */

/* i HAVE TO BE AWARE OF HOW THEY OVERWRITE each other*/
.section-title {
    color: #2ddf5c;
    text-align: center;
    /*font-family: inherit;*/
}

/* I can add a combinator to the h1 selector to narrow down which tyle of h1 tags I want to select */
#product-overview h1 {
    color: white;
    font-family: 'Anton', sans-serif;
    /* sens-serif is a browser default font */
    position: absolute;
    bottom: 5%;
    left: 3%;
}

/*====== Adding PLANS ============*/

.plan__list {
    width: 80%;
    margin: auto;
    /*centering the 3 elements of the block, within their div and therefore this section title perfectly aligns with the middle highlighted box. */
    text-align: center;
}

/* adding the plan class selector */
.plan {
    background: #d5ffdc;
    text-align: center;
    padding: 16px;
    margin: 8px;
    display: inline-block;
    width: 30%;
    vertical-align: middle;
}

.plan--highlighted {
    background: #19b84c;
    color: white;
    box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5);

}

.plan__annotation {
    background: white;
    color: #19b84c;
    padding: 8px;
    box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.5);
    border-radius: 10px;
}

.plan__title {
    color: #0e4f1f;
}


.plan__price {
    color: red;
}

.plan--highlighted .plan__title {
    color: white;
}

.plan--highlighted .plan__price {
    color: red;
}

/*adding feature plan selector*/
.plan__features {
    list-style: none;
}

.plan__feature {
    margin: 8px 0;
}

.button {
    background: darkgreen;
    color: white;
    /* inherit forces the inherited styles to be applied */
    font: inherit;
    border: 1.5px solid darkgreen;
    padding: 8px;
    border-radius: 8px;
    font-weight: bold;
    /* with cursor property , when hover over button a hand appear, can be added to elements i want to be clickable*/
    cursor: pointer;

}

/* to make buttons clickable and change color on hover*/
.button:hover,
.button:active {
    background: white;
    color: #0e4f1f;

}

/*when hover over the button the default border around it disapears*/
.button:focus {
    outline: none;
}


#key-features {
    background: #ff1b68;
    margin-top: 80px;
    padding: 16px;

}

#key-features .section-title {
    color: white;
    margin: 32px;
}

.key-feature__list {
    list-style: none;
    margin: 0;
    padding: 0;
    text-align: center;
}

.key_feature {
    display: inline-block;
    width: 33%;
    vertical-align: top;
}

.key-feature__image {
    background: pink;
    width: 128px;
    height: 128px;
    border: 2px;
    border-radius: 50%;
    margin: auto;
}

.key-feature__description {
    text-align: center;
    font-weight: bold;
    color: white;
    font-size: 20px;
}

/* with padding the content of the element is considered plus any margin,  */

/* padding and margin should not overlap hence the padding is added after the margin of child elements */
h1 {
    font-family: sans-serif;
}


/* the problem with the start selector is that it is very inefficient the way CSS has to parse all other elements, therefore I will use it but not for a global font family, I will use the body to wrap the whole content*/
/* 
* {
    font-family: sens-serif;
}  */

/* every element has a layer - margin, border, padding, */


/*making first letter bigger*/
p::first-letter {
    color: red;
    font-size: 25px;
}